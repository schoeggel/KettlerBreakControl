
MotorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  000006de  00000772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800128  00800128  0000083a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000086c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a6  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000053b  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048d  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003be  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b5  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002143  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	25 c0       	rjmp	.+74     	; 0x56 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	11 e0       	ldi	r17, 0x01	; 1
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ee ed       	ldi	r30, 0xDE	; 222
  32:	f6 e0       	ldi	r31, 0x06	; 6
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a8 32       	cpi	r26, 0x28	; 40
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a8 e2       	ldi	r26, 0x28	; 40
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 33       	cpi	r26, 0x31	; 49
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	58 d0       	rcall	.+176    	; 0x102 <main>
  52:	43 c3       	rjmp	.+1670   	; 0x6da <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_5>:
int main();
void toggleMode();
void initTimer();
uint8_t program(uint16_t s);

ISR(TIMER0_OVF_vect) {
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
  5e:	0f 92       	push	r0
  60:	11 24       	eor	r1, r1
  62:	2f 93       	push	r18
  64:	3f 93       	push	r19
  66:	4f 93       	push	r20
  68:	5f 93       	push	r21
  6a:	6f 93       	push	r22
  6c:	7f 93       	push	r23
  6e:	8f 93       	push	r24
  70:	9f 93       	push	r25
  72:	af 93       	push	r26
  74:	bf 93       	push	r27
  76:	ef 93       	push	r30
  78:	ff 93       	push	r31
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
	// cpu clock 8 mhz (int)
	// 8 mhz/1024/7812 = 1hz
	static uint16_t i = 0;		// wird alle 1024 / cpuf Sekunden inkrementiert.
	i++;
  82:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_ZZ10__vector_5E1i>
  86:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_ZZ10__vector_5E1i+0x1>
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_ZZ10__vector_5E1i+0x1>
  90:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_ZZ10__vector_5E1i>
	// TEST:
	if (i >= 200) {			// Es ist eine Sekunde vergangen
  94:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_ZZ10__vector_5E1i>
  98:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_ZZ10__vector_5E1i+0x1>
  9c:	88 3c       	cpi	r24, 0xC8	; 200
  9e:	91 05       	cpc	r25, r1
  a0:	d8 f0       	brcs	.+54     	; 0xd8 <__vector_5+0x82>
	//if (i >= 7812) {			// Es ist eine Sekunde vergangen
	
		i = 0;
  a2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <_ZZ10__vector_5E1i+0x1>
  a6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <_ZZ10__vector_5E1i>
		sekunden++;
  aa:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sekunden>
  ae:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <sekunden+0x1>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <sekunden+0x1>
  b8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sekunden>
		if (sekunden > 200*12) {  // auf 40 Minuten limitieren
  bc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sekunden>
  c0:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <sekunden+0x1>
  c4:	81 36       	cpi	r24, 0x61	; 97
  c6:	99 40       	sbci	r25, 0x09	; 9
  c8:	38 f0       	brcs	.+14     	; 0xd8 <__vector_5+0x82>
			sekunden = 200*12;
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	99 e0       	ldi	r25, 0x09	; 9
  ce:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <sekunden+0x1>
  d2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sekunden>
			toggleMode();
  d6:	bd d1       	rcall	.+890    	; 0x452 <_Z10toggleModev>
		}
	}
}
  d8:	00 00       	nop
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	bf 91       	pop	r27
  e4:	af 91       	pop	r26
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	7f 91       	pop	r23
  ec:	6f 91       	pop	r22
  ee:	5f 91       	pop	r21
  f0:	4f 91       	pop	r20
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:


int main(void)
{
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <main+0x8>
 10a:	00 d0       	rcall	.+0      	; 0x10c <main+0xa>
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62

	volatile int8_t delta = 0;
 112:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t userwert = 128;
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t sollwert = 128;
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t istwert = 127;
 11c:	8f e7       	ldi	r24, 0x7F	; 127
 11e:	8c 83       	std	Y+4, r24	; 0x04
	volatile uint8_t toleranz = 6;
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	8d 83       	std	Y+5, r24	; 0x05
	 

	init();
 124:	ae d1       	rcall	.+860    	; 0x482 <_Z4initv>
	initADC();
 126:	fd d1       	rcall	.+1018   	; 0x522 <_Z7initADCv>
	initTimer();
 128:	12 d2       	rcall	.+1060   	; 0x54e <_Z9initTimerv>
	//toggleMode();	// debug: direkt im programm mode starten


    while (1) 
    {
		delta = keyGain * readKeys();  // TODO: Overflow und co !
 12a:	ae d0       	rcall	.+348    	; 0x288 <_Z8readKeysv>
 12c:	89 83       	std	Y+1, r24	; 0x01
		userwert += delta;
 12e:	99 81       	ldd	r25, Y+1	; 0x01
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	89 0f       	add	r24, r25
 134:	8a 83       	std	Y+2, r24	; 0x02

		// Ist-Wert einlesen, (ADC Left Adjust Result, deshalb nur ein 8bit Register lesen)
		istwert = ADCH;
 136:	85 e2       	ldi	r24, 0x25	; 37
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	8c 83       	std	Y+4, r24	; 0x04


		// Modus berücksichtigen
		if (modus == 0) {				// Bremse manuell verstellen
 140:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 144:	88 23       	and	r24, r24
 146:	19 f4       	brne	.+6      	; 0x14e <main+0x4c>
			sollwert = userwert;
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	8b 83       	std	Y+3, r24	; 0x03
 14c:	09 c0       	rjmp	.+18     	; 0x160 <__stack+0x1>
		} else	{						// Programm läuft
			sollwert = 	program(sekunden) + delta;	
 14e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sekunden>
 152:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <sekunden+0x1>
 156:	27 d2       	rcall	.+1102   	; 0x5a6 <_Z7programj>
 158:	98 2f       	mov	r25, r24
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	89 0f       	add	r24, r25
 15e:	8b 83       	std	Y+3, r24	; 0x03




		// stellwert Limitieren
		if (sollwert < PotiLimitLower) {
 160:	8b 81       	ldd	r24, Y+3	; 0x03
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	09 2e       	mov	r0, r25
 168:	00 0c       	add	r0, r0
 16a:	aa 0b       	sbc	r26, r26
 16c:	bb 0b       	sbc	r27, r27
 16e:	bc 01       	movw	r22, r24
 170:	cd 01       	movw	r24, r26
 172:	3c d2       	rcall	.+1144   	; 0x5ec <__floatsisf>
 174:	dc 01       	movw	r26, r24
 176:	cb 01       	movw	r24, r22
 178:	11 e0       	ldi	r17, 0x01	; 1
 17a:	2a e0       	ldi	r18, 0x0A	; 10
 17c:	37 ed       	ldi	r19, 0xD7	; 215
 17e:	43 e4       	ldi	r20, 0x43	; 67
 180:	50 e4       	ldi	r21, 0x40	; 64
 182:	bc 01       	movw	r22, r24
 184:	cd 01       	movw	r24, r26
 186:	2c d2       	rcall	.+1112   	; 0x5e0 <__cmpsf2>
 188:	88 23       	and	r24, r24
 18a:	0c f0       	brlt	.+2      	; 0x18e <__stack+0x2f>
 18c:	10 e0       	ldi	r17, 0x00	; 0
 18e:	11 23       	and	r17, r17
 190:	19 f0       	breq	.+6      	; 0x198 <__stack+0x39>
			sollwert = PotiLimitLower;
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	8b 83       	std	Y+3, r24	; 0x03
 196:	1b c0       	rjmp	.+54     	; 0x1ce <__stack+0x6f>
			} else if (sollwert > PotiLimitUpper) {
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	09 2e       	mov	r0, r25
 1a0:	00 0c       	add	r0, r0
 1a2:	aa 0b       	sbc	r26, r26
 1a4:	bb 0b       	sbc	r27, r27
 1a6:	bc 01       	movw	r22, r24
 1a8:	cd 01       	movw	r24, r26
 1aa:	20 d2       	rcall	.+1088   	; 0x5ec <__floatsisf>
 1ac:	dc 01       	movw	r26, r24
 1ae:	cb 01       	movw	r24, r22
 1b0:	11 e0       	ldi	r17, 0x01	; 1
 1b2:	24 ea       	ldi	r18, 0xA4	; 164
 1b4:	30 ef       	ldi	r19, 0xF0	; 240
 1b6:	4b e7       	ldi	r20, 0x7B	; 123
 1b8:	53 e4       	ldi	r21, 0x43	; 67
 1ba:	bc 01       	movw	r22, r24
 1bc:	cd 01       	movw	r24, r26
 1be:	75 d2       	rcall	.+1258   	; 0x6aa <__gesf2>
 1c0:	18 16       	cp	r1, r24
 1c2:	0c f0       	brlt	.+2      	; 0x1c6 <__stack+0x67>
 1c4:	10 e0       	ldi	r17, 0x00	; 0
 1c6:	11 23       	and	r17, r17
 1c8:	11 f0       	breq	.+4      	; 0x1ce <__stack+0x6f>
			sollwert = PotiLimitUpper;
 1ca:	8b ef       	ldi	r24, 0xFB	; 251
 1cc:	8b 83       	std	Y+3, r24	; 0x03
		}

		// Motor steuer Signal
		if ((sollwert - istwert) > toleranz) {
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	8c 81       	ldd	r24, Y+4	; 0x04
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	28 1b       	sub	r18, r24
 1dc:	39 0b       	sbc	r19, r25
 1de:	8d 81       	ldd	r24, Y+5	; 0x05
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	82 17       	cp	r24, r18
 1e8:	93 07       	cpc	r25, r19
 1ea:	0c f0       	brlt	.+2      	; 0x1ee <__stack+0x8f>
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	44 23       	and	r20, r20
 1f0:	99 f0       	breq	.+38     	; 0x218 <__stack+0xb9>
			// motor + signal geben
			// mehr bremsen
			PORTB |= (1 << PinMotP);	//PinMotP im PORTB setzen
 1f2:	88 e3       	ldi	r24, 0x38	; 56
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	28 e3       	ldi	r18, 0x38	; 56
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	20 61       	ori	r18, 0x10	; 16
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
	        PORTB &= ~(1 << PinMotN);	//PinMotN im PORTB löschen
 204:	88 e3       	ldi	r24, 0x38	; 56
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	28 e3       	ldi	r18, 0x38	; 56
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	20 81       	ld	r18, Z
 210:	27 7f       	andi	r18, 0xF7	; 247
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
 216:	89 cf       	rjmp	.-238    	; 0x12a <main+0x28>

		} else if  ((istwert - sollwert) > toleranz) {
 218:	8c 81       	ldd	r24, Y+4	; 0x04
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	88 2f       	mov	r24, r24
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	28 1b       	sub	r18, r24
 226:	39 0b       	sbc	r19, r25
 228:	8d 81       	ldd	r24, Y+5	; 0x05
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	82 17       	cp	r24, r18
 232:	93 07       	cpc	r25, r19
 234:	0c f0       	brlt	.+2      	; 0x238 <__stack+0xd9>
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	44 23       	and	r20, r20
 23a:	99 f0       	breq	.+38     	; 0x262 <__stack+0x103>
			// motor - signal geben
			// weniger bremsen
			PORTB |= (1 << PinMotN);	//PinMotN im PORTB setzen
 23c:	88 e3       	ldi	r24, 0x38	; 56
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	28 e3       	ldi	r18, 0x38	; 56
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	28 60       	ori	r18, 0x08	; 8
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
			PORTB &= ~(1 << PinMotP);	//PinMotP im PORTB löschen
 24e:	88 e3       	ldi	r24, 0x38	; 56
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	28 e3       	ldi	r18, 0x38	; 56
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	f9 01       	movw	r30, r18
 258:	20 81       	ld	r18, Z
 25a:	2f 7e       	andi	r18, 0xEF	; 239
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
 260:	64 cf       	rjmp	.-312    	; 0x12a <main+0x28>

		} else {
			// motor soll nicht laufen
			PORTB &= ~(1 << PinMotN);	//PinMotN im PORTB löschen
 262:	88 e3       	ldi	r24, 0x38	; 56
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	28 e3       	ldi	r18, 0x38	; 56
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	f9 01       	movw	r30, r18
 26c:	20 81       	ld	r18, Z
 26e:	27 7f       	andi	r18, 0xF7	; 247
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
			PORTB &= ~(1 << PinMotP);	//PinMotP im PORTB löschen
 274:	88 e3       	ldi	r24, 0x38	; 56
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	28 e3       	ldi	r18, 0x38	; 56
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	f9 01       	movw	r30, r18
 27e:	20 81       	ld	r18, Z
 280:	2f 7e       	andi	r18, 0xEF	; 239
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
	initADC();
	initTimer();
	//toggleMode();	// debug: direkt im programm mode starten


    while (1) 
 286:	51 cf       	rjmp	.-350    	; 0x12a <main+0x28>

00000288 <_Z8readKeysv>:

	}
}


int8_t readKeys() {
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
	volatile static bool down = 0;

	// Eingänge lesen
	// acive-low !
	// weshalb kommt hier ein up =1 statt up= 0 :  up	=  ~(PINB & (1 << PinPlus));
	up	=  (~PINB & (1 << PinPlus));
 290:	86 e3       	ldi	r24, 0x36	; 54
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	88 2f       	mov	r24, r24
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	82 70       	andi	r24, 0x02	; 2
 29e:	99 27       	eor	r25, r25
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	89 2b       	or	r24, r25
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <_Z8readKeysv+0x20>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <_ZZ8readKeysvE2up>
	down = (~PINB & (1 << PinMinus));
 2ac:	86 e3       	ldi	r24, 0x36	; 54
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	88 2f       	mov	r24, r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	81 70       	andi	r24, 0x01	; 1
 2ba:	99 27       	eor	r25, r25
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	89 2b       	or	r24, r25
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <_Z8readKeysv+0x3c>
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <_ZZ8readKeysvE4down>
	

	if (keyState != 0) {
 2c8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_ZZ8readKeysvE8keyState>
 2cc:	88 23       	and	r24, r24
 2ce:	29 f0       	breq	.+10     	; 0x2da <_Z8readKeysv+0x52>
		++keyCounter;
 2d0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_ZZ8readKeysvE10keyCounter>
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_ZZ8readKeysvE10keyCounter>
	}
	

	// Es wurde zuvor noch nichts gedrückt
	if (keyState == 0) {		
 2da:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_ZZ8readKeysvE8keyState>
 2de:	88 23       	and	r24, r24
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <_Z8readKeysv+0x5c>
 2e2:	49 c0       	rjmp	.+146    	; 0x376 <_Z8readKeysv+0xee>
		
		if (up & down) {				// Beide Tasten gleichzeitig --> modus wechseln.
 2e4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_ZZ8readKeysvE2up>
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZZ8readKeysvE4down>
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	82 23       	and	r24, r18
 2f6:	93 23       	and	r25, r19
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	89 2b       	or	r24, r25
 2fc:	09 f4       	brne	.+2      	; 0x300 <_Z8readKeysv+0x78>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	22 23       	and	r18, r18
 302:	39 f0       	breq	.+14     	; 0x312 <_Z8readKeysv+0x8a>
			keyState = 3;
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 30a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ8readKeysvE10keyCounter>
			return(0);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	9d c0       	rjmp	.+314    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		} else if (up & ~down) {	 
 312:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_ZZ8readKeysvE2up>
 316:	28 2f       	mov	r18, r24
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZZ8readKeysvE4down>
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	80 95       	com	r24
 324:	90 95       	com	r25
 326:	82 23       	and	r24, r18
 328:	93 23       	and	r25, r19
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	89 2b       	or	r24, r25
 32e:	09 f4       	brne	.+2      	; 0x332 <_Z8readKeysv+0xaa>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	22 23       	and	r18, r18
 334:	39 f0       	breq	.+14     	; 0x344 <_Z8readKeysv+0xbc>
			keyState= 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 33c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ8readKeysvE10keyCounter>
			return(0);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	84 c0       	rjmp	.+264    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		} else if (down & ~up) {
 344:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZZ8readKeysvE4down>
 348:	28 2f       	mov	r18, r24
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_ZZ8readKeysvE2up>
 350:	88 2f       	mov	r24, r24
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	80 95       	com	r24
 356:	90 95       	com	r25
 358:	82 23       	and	r24, r18
 35a:	93 23       	and	r25, r19
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	89 2b       	or	r24, r25
 360:	09 f4       	brne	.+2      	; 0x364 <_Z8readKeysv+0xdc>
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	22 23       	and	r18, r18
 366:	39 f0       	breq	.+14     	; 0x376 <_Z8readKeysv+0xee>
			keyState= 2;
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 36e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ8readKeysvE10keyCounter>
			return(0);
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	6b c0       	rjmp	.+214    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		}
	}

	// up gedrückt, am warten
	if ((keyState == 1) & (keyCounter >= debounceCounter)) {
 376:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_ZZ8readKeysvE8keyState>
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	09 f0       	breq	.+2      	; 0x382 <_Z8readKeysv+0xfa>
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <_ZZ8readKeysvE10keyCounter>
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	2e 31       	cpi	r18, 0x1E	; 30
 38a:	08 f4       	brcc	.+2      	; 0x38e <_Z8readKeysv+0x106>
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	89 23       	and	r24, r25
 390:	88 23       	and	r24, r24
 392:	81 f0       	breq	.+32     	; 0x3b4 <_Z8readKeysv+0x12c>
		if (up) {
 394:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_ZZ8readKeysvE2up>
 398:	88 23       	and	r24, r24
 39a:	31 f0       	breq	.+12     	; 0x3a8 <_Z8readKeysv+0x120>
			keyState = 0;
 39c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 3a0:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ8readKeysvE10keyCounter>
			return(1);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	52 c0       	rjmp	.+164    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		} else {
			keyState = 0;
 3a8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 3ac:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ8readKeysvE10keyCounter>
			return(0);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	4c c0       	rjmp	.+152    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		}
	}

		
	// down gedrückt, am warten
	if ((keyState == 2) & (keyCounter >= debounceCounter)) {
 3b4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_ZZ8readKeysvE8keyState>
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <_Z8readKeysv+0x138>
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <_ZZ8readKeysvE10keyCounter>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	2e 31       	cpi	r18, 0x1E	; 30
 3c8:	08 f4       	brcc	.+2      	; 0x3cc <_Z8readKeysv+0x144>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	89 23       	and	r24, r25
 3ce:	88 23       	and	r24, r24
 3d0:	81 f0       	breq	.+32     	; 0x3f2 <_Z8readKeysv+0x16a>
		if (down) {
 3d2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZZ8readKeysvE4down>
 3d6:	88 23       	and	r24, r24
 3d8:	31 f0       	breq	.+12     	; 0x3e6 <_Z8readKeysv+0x15e>
			keyState = 0;
 3da:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 3de:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ8readKeysvE10keyCounter>
			return(-1);
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	33 c0       	rjmp	.+102    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			} else {
			keyState = 0;
 3e6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 3ea:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ8readKeysvE10keyCounter>
			return(0);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	2d c0       	rjmp	.+90     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		}
	}

	// up und down gedrückt, am warten
	if ((keyState == 3) & (keyCounter >= debounceSpecial)) {
 3f2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_ZZ8readKeysvE8keyState>
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	09 f0       	breq	.+2      	; 0x3fe <_Z8readKeysv+0x176>
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <_ZZ8readKeysvE10keyCounter>
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	28 3c       	cpi	r18, 0xC8	; 200
 406:	08 f4       	brcc	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	89 23       	and	r24, r25
 40c:	88 23       	and	r24, r24
 40e:	e9 f0       	breq	.+58     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		if (up & down) {
 410:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_ZZ8readKeysvE2up>
 414:	28 2f       	mov	r18, r24
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZZ8readKeysvE4down>
 41c:	88 2f       	mov	r24, r24
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	82 23       	and	r24, r18
 422:	93 23       	and	r25, r19
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	89 2b       	or	r24, r25
 428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	22 23       	and	r18, r18
 42e:	39 f0       	breq	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			keyState = 0;
 430:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 434:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ8readKeysvE10keyCounter>
			toggleMode();
 438:	0c d0       	rcall	.+24     	; 0x452 <_Z10toggleModev>
			return(0);
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			} else {
			keyState = 0;
 43e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 442:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ8readKeysvE10keyCounter>
			return(0);
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	01 c0       	rjmp	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		}
	}

	return(0);
 44a:	80 e0       	ldi	r24, 0x00	; 0
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <_Z10toggleModev>:


 void toggleMode(){
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
	* Modus 1: Programm wird durchlaufen ca. 20 Minuten. Während dem Programm kann 
	*          der Schwierigkeitsgrad durch + und - Tasten verändert werden.
	* Modus > 1 : TODO ....
 */

	 if (modus == 0) {
 45a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 45e:	88 23       	and	r24, r24
 460:	49 f4       	brne	.+18     	; 0x474 <_Z10toggleModev+0x22>
		modus = 1;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
		sekunden = 0;
 468:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <sekunden+0x1>
 46c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sekunden>
		sei();
 470:	78 94       	sei
	 } else {
		modus = 0;
		cli();
	 }

}
 472:	03 c0       	rjmp	.+6      	; 0x47a <_Z10toggleModev+0x28>
		modus = 1;
		sekunden = 0;
		sei();

	 } else {
		modus = 0;
 474:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
		cli();
 478:	f8 94       	cli
	 }

}
 47a:	00 00       	nop
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <_Z4initv>:


void init(){
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
	// Als Eingang konfigurieren (Eingang: clear bit)
	DDRB &= ~(1 << PinPlus);
 48a:	87 e3       	ldi	r24, 0x37	; 55
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	27 e3       	ldi	r18, 0x37	; 55
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	f9 01       	movw	r30, r18
 494:	20 81       	ld	r18, Z
 496:	2d 7f       	andi	r18, 0xFD	; 253
 498:	fc 01       	movw	r30, r24
 49a:	20 83       	st	Z, r18
	DDRB &= ~(1 << PinMinus);
 49c:	87 e3       	ldi	r24, 0x37	; 55
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	27 e3       	ldi	r18, 0x37	; 55
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	f9 01       	movw	r30, r18
 4a6:	20 81       	ld	r18, Z
 4a8:	2e 7f       	andi	r18, 0xFE	; 254
 4aa:	fc 01       	movw	r30, r24
 4ac:	20 83       	st	Z, r18
	DDRB &= ~(1 << PinVin);
 4ae:	87 e3       	ldi	r24, 0x37	; 55
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	27 e3       	ldi	r18, 0x37	; 55
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	f9 01       	movw	r30, r18
 4b8:	20 81       	ld	r18, Z
 4ba:	2b 7f       	andi	r18, 0xFB	; 251
 4bc:	fc 01       	movw	r30, r24
 4be:	20 83       	st	Z, r18

	// Für die Taster die internen PullUp Resistors aktivieren
	// richtig: set bit:
	PORTB |= (1 << PinPlus);
 4c0:	88 e3       	ldi	r24, 0x38	; 56
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	28 e3       	ldi	r18, 0x38	; 56
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	f9 01       	movw	r30, r18
 4ca:	20 81       	ld	r18, Z
 4cc:	22 60       	ori	r18, 0x02	; 2
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
	PORTB |= (1 << PinMinus);
 4d2:	88 e3       	ldi	r24, 0x38	; 56
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	28 e3       	ldi	r18, 0x38	; 56
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	f9 01       	movw	r30, r18
 4dc:	20 81       	ld	r18, Z
 4de:	21 60       	ori	r18, 0x01	; 1
 4e0:	fc 01       	movw	r30, r24
 4e2:	20 83       	st	Z, r18


	
	//Als Ausgang konfigurieren: (Ausgang: set bit)
	DDRB |= (1 << PinMotP);
 4e4:	87 e3       	ldi	r24, 0x37	; 55
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	27 e3       	ldi	r18, 0x37	; 55
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	f9 01       	movw	r30, r18
 4ee:	20 81       	ld	r18, Z
 4f0:	20 61       	ori	r18, 0x10	; 16
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18
	DDRB |= (1 << PinMotN);
 4f6:	87 e3       	ldi	r24, 0x37	; 55
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	27 e3       	ldi	r18, 0x37	; 55
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	f9 01       	movw	r30, r18
 500:	20 81       	ld	r18, Z
 502:	28 60       	ori	r18, 0x08	; 8
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
	DDRB |= (1 << PinLED);
 508:	87 e3       	ldi	r24, 0x37	; 55
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	27 e3       	ldi	r18, 0x37	; 55
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	20 81       	ld	r18, Z
 514:	20 62       	ori	r18, 0x20	; 32
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
}
 51a:	00 00       	nop
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <_Z7initADCv>:


void initADC()
{
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
            (0 << REFS1) |		// Sets ref. voltage to VCC, bit 1 (tiny45 != mega8)
            (0 << REFS0) |		// Sets ref. voltage to VCC, bit 0 (tiny45 != mega8)
            (0 << MUX3)  |		// use ADC2 for input (PinVin=PB2), MUX bit 3
            (0 << MUX2)  |		// use ADC2 for input (PinVin=PB2), MUX bit 2
            (0 << MUX1)  |		// use ADC2 for input (PinVin=PB2), MUX bit 1
            (1 << MUX0);		// use ADC2 for input (PinVin=PB2), MUX bit 0
 52a:	87 e2       	ldi	r24, 0x27	; 39
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	21 e2       	ldi	r18, 0x21	; 33
 530:	fc 01       	movw	r30, r24
 532:	20 83       	st	Z, r18
            (1 << ADEN)  |		// Enable ADC 
            (1 << ADSC)  |		// start conversion
			(1 << ADATE) |		// ADC auto trigger enable (trigger select in ASCSRB)
			(1 << ADPS2) |		// set prescaler to 64, bit 2 
            (1 << ADPS1) |		// set prescaler to 64, bit 1 
            (0 << ADPS0);		// set prescaler to 64, bit 0  
 534:	86 e2       	ldi	r24, 0x26	; 38
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	26 ee       	ldi	r18, 0xE6	; 230
 53a:	fc 01       	movw	r30, r24
 53c:	20 83       	st	Z, r18
					
	ADCSRB =					// Set trigger source = Free Running mode (000)
			 (0 << ADTS2)  |	// ADC Auto Trigger Source Bit 2
			 (0 << ADTS1)  |	// ADC Auto Trigger Source Bit 1
			 (0 << ADTS0);		// ADC Auto Trigger Source Bit 0
 53e:	83 e2       	ldi	r24, 0x23	; 35
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	fc 01       	movw	r30, r24
 544:	10 82       	st	Z, r1
}
 546:	00 00       	nop
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <_Z9initTimerv>:

void initTimer(){
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
// konfiguriert und startet den timer, damit der Programmfortschritt bekannt ist.
    
	TCCR0B |= (1<<CS02);		// prescale CPU-Takt / 1024
 556:	83 e5       	ldi	r24, 0x53	; 83
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	23 e5       	ldi	r18, 0x53	; 83
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	f9 01       	movw	r30, r18
 560:	20 81       	ld	r18, Z
 562:	24 60       	ori	r18, 0x04	; 4
 564:	fc 01       	movw	r30, r24
 566:	20 83       	st	Z, r18
	TCCR0B |= (1<<CS00);		// prescale CPU-Takt / 1024
 568:	83 e5       	ldi	r24, 0x53	; 83
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	23 e5       	ldi	r18, 0x53	; 83
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	f9 01       	movw	r30, r18
 572:	20 81       	ld	r18, Z
 574:	21 60       	ori	r18, 0x01	; 1
 576:	fc 01       	movw	r30, r24
 578:	20 83       	st	Z, r18
    TIMSK  |= (1<<TOIE0);		// TOIE0: Timer/Counter0 Overflow Interrupt Enable
 57a:	89 e5       	ldi	r24, 0x59	; 89
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	29 e5       	ldi	r18, 0x59	; 89
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	f9 01       	movw	r30, r18
 584:	20 81       	ld	r18, Z
 586:	22 60       	ori	r18, 0x02	; 2
 588:	fc 01       	movw	r30, r24
 58a:	20 83       	st	Z, r18
	TIFR   |= (1<<TOV0);		// TIFR  Timer/Counter Interrupt Flag Register: set Timer/Counter0 Overflow Flag
 58c:	88 e5       	ldi	r24, 0x58	; 88
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	28 e5       	ldi	r18, 0x58	; 88
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	f9 01       	movw	r30, r18
 596:	20 81       	ld	r18, Z
 598:	22 60       	ori	r18, 0x02	; 2
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
}
 59e:	00 00       	nop
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <_Z7programj>:




uint8_t program(uint16_t s){
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	00 d0       	rcall	.+0      	; 0x5ac <_Z7programj+0x6>
 5ac:	1f 92       	push	r1
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	9b 83       	std	Y+3, r25	; 0x03
 5b4:	8a 83       	std	Y+2, r24	; 0x02
	0xFF, 0xFE, 0xFD, 0xFA, 0xF8, 0xF3, 0xEF, 0xE9,
	0xE1, 0xD5, 0xC4, 0xAF, 0x99, 0x79, 0x58, 0x40,
	0x31, 0x28, 0x22, 0x1B, 0x15, 0x0F, 0x08, 0x05
};

uint8_t p = s/12;
 5b6:	8a 81       	ldd	r24, Y+2	; 0x02
 5b8:	9b 81       	ldd	r25, Y+3	; 0x03
 5ba:	2c e0       	ldi	r18, 0x0C	; 12
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	b9 01       	movw	r22, r18
 5c0:	78 d0       	rcall	.+240    	; 0x6b2 <__udivmodhi4>
 5c2:	cb 01       	movw	r24, r22
 5c4:	89 83       	std	Y+1, r24	; 0x01
return(prgData[p]);
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	88 2f       	mov	r24, r24
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	80 5a       	subi	r24, 0xA0	; 160
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z

 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

000005e0 <__cmpsf2>:
 5e0:	40 d0       	rcall	.+128    	; 0x662 <__fp_cmp>
 5e2:	08 f4       	brcc	.+2      	; 0x5e6 <__cmpsf2+0x6>
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	08 95       	ret

000005e8 <__floatunsisf>:
 5e8:	e8 94       	clt
 5ea:	09 c0       	rjmp	.+18     	; 0x5fe <__floatsisf+0x12>

000005ec <__floatsisf>:
 5ec:	97 fb       	bst	r25, 7
 5ee:	3e f4       	brtc	.+14     	; 0x5fe <__floatsisf+0x12>
 5f0:	90 95       	com	r25
 5f2:	80 95       	com	r24
 5f4:	70 95       	com	r23
 5f6:	61 95       	neg	r22
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	8f 4f       	sbci	r24, 0xFF	; 255
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	99 23       	and	r25, r25
 600:	a9 f0       	breq	.+42     	; 0x62c <__floatsisf+0x40>
 602:	f9 2f       	mov	r31, r25
 604:	96 e9       	ldi	r25, 0x96	; 150
 606:	bb 27       	eor	r27, r27
 608:	93 95       	inc	r25
 60a:	f6 95       	lsr	r31
 60c:	87 95       	ror	r24
 60e:	77 95       	ror	r23
 610:	67 95       	ror	r22
 612:	b7 95       	ror	r27
 614:	f1 11       	cpse	r31, r1
 616:	f8 cf       	rjmp	.-16     	; 0x608 <__floatsisf+0x1c>
 618:	fa f4       	brpl	.+62     	; 0x658 <__floatsisf+0x6c>
 61a:	bb 0f       	add	r27, r27
 61c:	11 f4       	brne	.+4      	; 0x622 <__floatsisf+0x36>
 61e:	60 ff       	sbrs	r22, 0
 620:	1b c0       	rjmp	.+54     	; 0x658 <__floatsisf+0x6c>
 622:	6f 5f       	subi	r22, 0xFF	; 255
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	16 c0       	rjmp	.+44     	; 0x658 <__floatsisf+0x6c>
 62c:	88 23       	and	r24, r24
 62e:	11 f0       	breq	.+4      	; 0x634 <__floatsisf+0x48>
 630:	96 e9       	ldi	r25, 0x96	; 150
 632:	11 c0       	rjmp	.+34     	; 0x656 <__floatsisf+0x6a>
 634:	77 23       	and	r23, r23
 636:	21 f0       	breq	.+8      	; 0x640 <__floatsisf+0x54>
 638:	9e e8       	ldi	r25, 0x8E	; 142
 63a:	87 2f       	mov	r24, r23
 63c:	76 2f       	mov	r23, r22
 63e:	05 c0       	rjmp	.+10     	; 0x64a <__floatsisf+0x5e>
 640:	66 23       	and	r22, r22
 642:	71 f0       	breq	.+28     	; 0x660 <__floatsisf+0x74>
 644:	96 e8       	ldi	r25, 0x86	; 134
 646:	86 2f       	mov	r24, r22
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	2a f0       	brmi	.+10     	; 0x658 <__floatsisf+0x6c>
 64e:	9a 95       	dec	r25
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	da f7       	brpl	.-10     	; 0x64e <__floatsisf+0x62>
 658:	88 0f       	add	r24, r24
 65a:	96 95       	lsr	r25
 65c:	87 95       	ror	r24
 65e:	97 f9       	bld	r25, 7
 660:	08 95       	ret

00000662 <__fp_cmp>:
 662:	99 0f       	add	r25, r25
 664:	00 08       	sbc	r0, r0
 666:	55 0f       	add	r21, r21
 668:	aa 0b       	sbc	r26, r26
 66a:	e0 e8       	ldi	r30, 0x80	; 128
 66c:	fe ef       	ldi	r31, 0xFE	; 254
 66e:	16 16       	cp	r1, r22
 670:	17 06       	cpc	r1, r23
 672:	e8 07       	cpc	r30, r24
 674:	f9 07       	cpc	r31, r25
 676:	c0 f0       	brcs	.+48     	; 0x6a8 <__fp_cmp+0x46>
 678:	12 16       	cp	r1, r18
 67a:	13 06       	cpc	r1, r19
 67c:	e4 07       	cpc	r30, r20
 67e:	f5 07       	cpc	r31, r21
 680:	98 f0       	brcs	.+38     	; 0x6a8 <__fp_cmp+0x46>
 682:	62 1b       	sub	r22, r18
 684:	73 0b       	sbc	r23, r19
 686:	84 0b       	sbc	r24, r20
 688:	95 0b       	sbc	r25, r21
 68a:	39 f4       	brne	.+14     	; 0x69a <__fp_cmp+0x38>
 68c:	0a 26       	eor	r0, r26
 68e:	61 f0       	breq	.+24     	; 0x6a8 <__fp_cmp+0x46>
 690:	23 2b       	or	r18, r19
 692:	24 2b       	or	r18, r20
 694:	25 2b       	or	r18, r21
 696:	21 f4       	brne	.+8      	; 0x6a0 <__fp_cmp+0x3e>
 698:	08 95       	ret
 69a:	0a 26       	eor	r0, r26
 69c:	09 f4       	brne	.+2      	; 0x6a0 <__fp_cmp+0x3e>
 69e:	a1 40       	sbci	r26, 0x01	; 1
 6a0:	a6 95       	lsr	r26
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	81 1d       	adc	r24, r1
 6a6:	81 1d       	adc	r24, r1
 6a8:	08 95       	ret

000006aa <__gesf2>:
 6aa:	db df       	rcall	.-74     	; 0x662 <__fp_cmp>
 6ac:	08 f4       	brcc	.+2      	; 0x6b0 <__gesf2+0x6>
 6ae:	8f ef       	ldi	r24, 0xFF	; 255
 6b0:	08 95       	ret

000006b2 <__udivmodhi4>:
 6b2:	aa 1b       	sub	r26, r26
 6b4:	bb 1b       	sub	r27, r27
 6b6:	51 e1       	ldi	r21, 0x11	; 17
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <__udivmodhi4_ep>

000006ba <__udivmodhi4_loop>:
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	a6 17       	cp	r26, r22
 6c0:	b7 07       	cpc	r27, r23
 6c2:	10 f0       	brcs	.+4      	; 0x6c8 <__udivmodhi4_ep>
 6c4:	a6 1b       	sub	r26, r22
 6c6:	b7 0b       	sbc	r27, r23

000006c8 <__udivmodhi4_ep>:
 6c8:	88 1f       	adc	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	5a 95       	dec	r21
 6ce:	a9 f7       	brne	.-22     	; 0x6ba <__udivmodhi4_loop>
 6d0:	80 95       	com	r24
 6d2:	90 95       	com	r25
 6d4:	bc 01       	movw	r22, r24
 6d6:	cd 01       	movw	r24, r26
 6d8:	08 95       	ret

000006da <_exit>:
 6da:	f8 94       	cli

000006dc <__stop_program>:
 6dc:	ff cf       	rjmp	.-2      	; 0x6dc <__stop_program>
