
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000344  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c2  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a4  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000353  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000366  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a5 36       	cpi	r26, 0x65	; 101
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	8e d0       	rcall	.+284    	; 0x158 <main>
  3c:	47 c1       	rjmp	.+654    	; 0x2cc <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <_Z8readKeysv>:
	static uint8_t keyState = 0;
	volatile static bool up  = 0;
	volatile static bool down = 0;

	// Eingänge lesen
	up	=  PINB & (1 << PinPlus);
  40:	86 b3       	in	r24, 0x16	; 22
  42:	81 70       	andi	r24, 0x01	; 1
  44:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZZ8readKeysvE2up>
	down = PINB & (1 << PinMinus);
  48:	86 b3       	in	r24, 0x16	; 22
  4a:	86 95       	lsr	r24
  4c:	81 70       	andi	r24, 0x01	; 1
  4e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZZ8readKeysvE4down>
	++keyCounter;
  52:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZZ8readKeysvE10keyCounter>
  56:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <_ZZ8readKeysvE10keyCounter+0x1>
  5a:	01 96       	adiw	r24, 0x01	; 1
  5c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <_ZZ8readKeysvE10keyCounter+0x1>
  60:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <_ZZ8readKeysvE10keyCounter>

	// Beide Tasten gleichzeitig --> ungültig.
	if (up & down) {
  64:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_ZZ8readKeysvE2up>
  68:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <_ZZ8readKeysvE4down>
  6c:	22 23       	and	r18, r18
  6e:	31 f0       	breq	.+12     	; 0x7c <_Z8readKeysv+0x3c>
  70:	33 23       	and	r19, r19
  72:	21 f0       	breq	.+8      	; 0x7c <_Z8readKeysv+0x3c>
		keyState = 0;
  74:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		return(0);
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	08 95       	ret
	}

	// Es wurde zuvor noch nichts gedrückt
	if (keyState == 0) {
  7c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  80:	21 11       	cpse	r18, r1
  82:	1b c0       	rjmp	.+54     	; 0xba <_Z8readKeysv+0x7a>
		if (up) {
  84:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ8readKeysvE2up>
  88:	88 23       	and	r24, r24
  8a:	49 f0       	breq	.+18     	; 0x9e <_Z8readKeysv+0x5e>
			keyState= 1;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			keyCounter = 0;
  92:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter+0x1>
  96:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_ZZ8readKeysvE10keyCounter>
			return(0);
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	08 95       	ret
		} else if (down) {
  9e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_ZZ8readKeysvE4down>
  a2:	88 23       	and	r24, r24
  a4:	09 f4       	brne	.+2      	; 0xa8 <_Z8readKeysv+0x68>
  a6:	45 c0       	rjmp	.+138    	; 0x132 <_Z8readKeysv+0xf2>
			keyState= 2;
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			keyCounter = 0;
  ae:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter+0x1>
  b2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_ZZ8readKeysvE10keyCounter>
			return(0);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	08 95       	ret
		}
	}

	// up gedrückt, am warten
	if ((keyState == 1) & (keyCounter >= debounceCounter)) {
  ba:	31 e0       	ldi	r19, 0x01	; 1
  bc:	89 2b       	or	r24, r25
  be:	09 f4       	brne	.+2      	; 0xc2 <_Z8readKeysv+0x82>
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	21 30       	cpi	r18, 0x01	; 1
  c6:	09 f0       	breq	.+2      	; 0xca <_Z8readKeysv+0x8a>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	88 23       	and	r24, r24
  cc:	b1 f0       	breq	.+44     	; 0xfa <_Z8readKeysv+0xba>
  ce:	33 23       	and	r19, r19
  d0:	a1 f0       	breq	.+40     	; 0xfa <_Z8readKeysv+0xba>
		if (up) {
  d2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ8readKeysvE2up>
  d6:	88 23       	and	r24, r24
  d8:	41 f0       	breq	.+16     	; 0xea <_Z8readKeysv+0xaa>
			keyState = 0;
  da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			keyCounter = 0;
  de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter+0x1>
  e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_ZZ8readKeysvE10keyCounter>
			return(1);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
		} else {
			keyState = 0;
  ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			keyCounter = 0;
  ee:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter+0x1>
  f2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_ZZ8readKeysvE10keyCounter>
			return(0);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret
		}
	}

		
	// down gedrückt, am warten
	if ((keyState == 2) & (keyCounter >= debounceCounter)) {
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	22 30       	cpi	r18, 0x02	; 2
  fe:	09 f0       	breq	.+2      	; 0x102 <_Z8readKeysv+0xc2>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	88 23       	and	r24, r24
 104:	c1 f0       	breq	.+48     	; 0x136 <_Z8readKeysv+0xf6>
 106:	33 23       	and	r19, r19
 108:	b1 f0       	breq	.+44     	; 0x136 <_Z8readKeysv+0xf6>
		if (down) {
 10a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_ZZ8readKeysvE4down>
 10e:	88 23       	and	r24, r24
 110:	41 f0       	breq	.+16     	; 0x122 <_Z8readKeysv+0xe2>
			keyState = 0;
 112:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			keyCounter = 0;
 116:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter+0x1>
 11a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_ZZ8readKeysvE10keyCounter>
			return(-1);
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	08 95       	ret
			} else {
			keyState = 0;
 122:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			keyCounter = 0;
 126:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter+0x1>
 12a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_ZZ8readKeysvE10keyCounter>
			return(0);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
		}
	}
	return(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
 136:	80 e0       	ldi	r24, 0x00	; 0
}
 138:	08 95       	ret

0000013a <_Z4initv>:


void init(){
	// Als Eingang konfigurieren (Eingang: clear bit)
	DDRB &= ~(1 << PinPlus);
 13a:	b8 98       	cbi	0x17, 0	; 23
	DDRB &= ~(1 << PinMinus);
 13c:	b9 98       	cbi	0x17, 1	; 23
	DDRB &= ~(1 << PinVin);
 13e:	ba 98       	cbi	0x17, 2	; 23

	// Für die Taster die internen PullUp Resistors aktivieren
	PORTB &= ~(1 << PinPlus);
 140:	c0 98       	cbi	0x18, 0	; 24
	PORTB &= ~(1 << PinMinus);
 142:	c1 98       	cbi	0x18, 1	; 24
	
	//Als Ausgang konfigurieren: (Ausgang: set bit)
	DDRB |= (1 << PinMotP);
 144:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= (1 << PinMotN);
 146:	bc 9a       	sbi	0x17, 4	; 23
	DDRB |= (1 << PinLED);
 148:	bd 9a       	sbi	0x17, 5	; 23
 14a:	08 95       	ret

0000014c <_Z7initADCv>:
            (0 << REFS1) |		// Sets ref. voltage to VCC, bit 1 (tiny45 != mega8)
            (0 << REFS0) |		// Sets ref. voltage to VCC, bit 0 (tiny45 != mega8)
            (0 << MUX3)  |		// use ADC2 for input (PinVin=PB2), MUX bit 3
            (0 << MUX2)  |		// use ADC2 for input (PinVin=PB2), MUX bit 2
            (0 << MUX1)  |		// use ADC2 for input (PinVin=PB2), MUX bit 1
            (1 << MUX0);		// use ADC2 for input (PinVin=PB2), MUX bit 0
 14c:	81 e2       	ldi	r24, 0x21	; 33
 14e:	87 b9       	out	0x07, r24	; 7
            (1 << ADEN)  |		// Enable ADC 
            (1 << ADSC)  |		// start conversion
			(1 << ADATE) |		// ADC auto trigger enable (trigger select in ASCSRB)
			(1 << ADPS2) |		// set prescaler to 64, bit 2 
            (1 << ADPS1) |		// set prescaler to 64, bit 1 
            (0 << ADPS0);		// set prescaler to 64, bit 0  
 150:	86 ee       	ldi	r24, 0xE6	; 230
 152:	86 b9       	out	0x06, r24	; 6
					
	ADCSRB =					// Set trigger source = Free Running mode (000)
			 (0 << ADTS2)  |	// ADC Auto Trigger Source Bit 2
			 (0 << ADTS1)  |	// ADC Auto Trigger Source Bit 1
			 (0 << ADTS0);		// ADC Auto Trigger Source Bit 0
 154:	13 b8       	out	0x03, r1	; 3
 156:	08 95       	ret

00000158 <main>:
int main();



int main(void)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	00 d0       	rcall	.+0      	; 0x15e <main+0x6>
 15e:	00 d0       	rcall	.+0      	; 0x160 <__stack+0x1>
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62

	volatile int8_t delta = 0;
 164:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t sollwert = 128;
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t istwert = 127;
 16a:	8f e7       	ldi	r24, 0x7F	; 127
 16c:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t toleranz = 5;
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	8c 83       	std	Y+4, r24	; 0x04

	init();
 172:	e3 df       	rcall	.-58     	; 0x13a <_Z4initv>
	initADC();
 174:	eb df       	rcall	.-42     	; 0x14c <_Z7initADCv>

		// stellwert Limitieren
		if (sollwert < PotiLimitLower) {
			sollwert = PotiLimitLower;
			} else if (sollwert > PotiLimitUpper) {
			sollwert = PotiLimitUpper;
 176:	04 ef       	ldi	r16, 0xF4	; 244
		delta = keyGain * readKeys();
		sollwert += delta;

		// stellwert Limitieren
		if (sollwert < PotiLimitLower) {
			sollwert = PotiLimitLower;
 178:	19 e1       	ldi	r17, 0x19	; 25
	init();
	initADC();

    while (1) 
    {
		delta = keyGain * readKeys();
 17a:	62 df       	rcall	.-316    	; 0x40 <_Z8readKeysv>
 17c:	89 83       	std	Y+1, r24	; 0x01
		sollwert += delta;
 17e:	99 81       	ldd	r25, Y+1	; 0x01
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	89 0f       	add	r24, r25
 184:	8a 83       	std	Y+2, r24	; 0x02

		// stellwert Limitieren
		if (sollwert < PotiLimitLower) {
 186:	6a 81       	ldd	r22, Y+2	; 0x02
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	3b d0       	rcall	.+118    	; 0x206 <__floatsisf>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4c ec       	ldi	r20, 0xCC	; 204
 196:	51 e4       	ldi	r21, 0x41	; 65
 198:	30 d0       	rcall	.+96     	; 0x1fa <__cmpsf2>
 19a:	88 23       	and	r24, r24
 19c:	14 f4       	brge	.+4      	; 0x1a2 <__stack+0x43>
			sollwert = PotiLimitLower;
 19e:	1a 83       	std	Y+2, r17	; 0x02
 1a0:	0d c0       	rjmp	.+26     	; 0x1bc <__stack+0x5d>
			} else if (sollwert > PotiLimitUpper) {
 1a2:	6a 81       	ldd	r22, Y+2	; 0x02
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	2d d0       	rcall	.+90     	; 0x206 <__floatsisf>
 1ac:	2d ec       	ldi	r18, 0xCD	; 205
 1ae:	3c ec       	ldi	r19, 0xCC	; 204
 1b0:	44 e7       	ldi	r20, 0x74	; 116
 1b2:	53 e4       	ldi	r21, 0x43	; 67
 1b4:	87 d0       	rcall	.+270    	; 0x2c4 <__gesf2>
 1b6:	18 16       	cp	r1, r24
 1b8:	0c f4       	brge	.+2      	; 0x1bc <__stack+0x5d>
			sollwert = PotiLimitUpper;
 1ba:	0a 83       	std	Y+2, r16	; 0x02
		}


		// Ist-Wert einlesen, (ADC Left Adjust Result, deshalb nur ein 8bit Register lesen)
		istwert = ADCH;
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	8b 83       	std	Y+3, r24	; 0x03


		// Motor steuer Signal
		if ((sollwert - istwert) > toleranz) {
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	3b 81       	ldd	r19, Y+3	; 0x03
 1c4:	2c 81       	ldd	r18, Y+4	; 0x04
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	83 1b       	sub	r24, r19
 1ca:	91 09       	sbc	r25, r1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	28 17       	cp	r18, r24
 1d0:	39 07       	cpc	r19, r25
 1d2:	1c f4       	brge	.+6      	; 0x1da <__stack+0x7b>
			// motor + signal geben
			// mehr bremsen
			PORTB |= (1 << PinMotP);	//PinMotP im PORTB setzen
 1d4:	c3 9a       	sbi	0x18, 3	; 24
	        PORTB &= ~(1 << PinMotN);	//PinMotN im PORTB löschen
 1d6:	c4 98       	cbi	0x18, 4	; 24
 1d8:	d0 cf       	rjmp	.-96     	; 0x17a <__stack+0x1b>

		} else if  ((istwert - sollwert) > toleranz) {
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	3a 81       	ldd	r19, Y+2	; 0x02
 1de:	2c 81       	ldd	r18, Y+4	; 0x04
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	83 1b       	sub	r24, r19
 1e4:	91 09       	sbc	r25, r1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	28 17       	cp	r18, r24
 1ea:	39 07       	cpc	r19, r25
 1ec:	1c f4       	brge	.+6      	; 0x1f4 <__stack+0x95>
			// motor - signal geben
			// weniger bremsen
			PORTB |= (1 << PinMotN);	//PinMotN im PORTB setzen
 1ee:	c4 9a       	sbi	0x18, 4	; 24
			PORTB &= ~(1 << PinMotP);	//PinMotP im PORTB löschen
 1f0:	c3 98       	cbi	0x18, 3	; 24
 1f2:	c3 cf       	rjmp	.-122    	; 0x17a <__stack+0x1b>

		} else {
			// motor soll nicht laufen
			PORTB &= ~(1 << PinMotN);	//PinMotN im PORTB löschen
 1f4:	c4 98       	cbi	0x18, 4	; 24
			PORTB &= ~(1 << PinMotP);	//PinMotP im PORTB löschen
 1f6:	c3 98       	cbi	0x18, 3	; 24
 1f8:	c0 cf       	rjmp	.-128    	; 0x17a <__stack+0x1b>

000001fa <__cmpsf2>:
 1fa:	40 d0       	rcall	.+128    	; 0x27c <__fp_cmp>
 1fc:	08 f4       	brcc	.+2      	; 0x200 <__cmpsf2+0x6>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	08 95       	ret

00000202 <__floatunsisf>:
 202:	e8 94       	clt
 204:	09 c0       	rjmp	.+18     	; 0x218 <__floatsisf+0x12>

00000206 <__floatsisf>:
 206:	97 fb       	bst	r25, 7
 208:	3e f4       	brtc	.+14     	; 0x218 <__floatsisf+0x12>
 20a:	90 95       	com	r25
 20c:	80 95       	com	r24
 20e:	70 95       	com	r23
 210:	61 95       	neg	r22
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	8f 4f       	sbci	r24, 0xFF	; 255
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	99 23       	and	r25, r25
 21a:	a9 f0       	breq	.+42     	; 0x246 <__floatsisf+0x40>
 21c:	f9 2f       	mov	r31, r25
 21e:	96 e9       	ldi	r25, 0x96	; 150
 220:	bb 27       	eor	r27, r27
 222:	93 95       	inc	r25
 224:	f6 95       	lsr	r31
 226:	87 95       	ror	r24
 228:	77 95       	ror	r23
 22a:	67 95       	ror	r22
 22c:	b7 95       	ror	r27
 22e:	f1 11       	cpse	r31, r1
 230:	f8 cf       	rjmp	.-16     	; 0x222 <__floatsisf+0x1c>
 232:	fa f4       	brpl	.+62     	; 0x272 <__floatsisf+0x6c>
 234:	bb 0f       	add	r27, r27
 236:	11 f4       	brne	.+4      	; 0x23c <__floatsisf+0x36>
 238:	60 ff       	sbrs	r22, 0
 23a:	1b c0       	rjmp	.+54     	; 0x272 <__floatsisf+0x6c>
 23c:	6f 5f       	subi	r22, 0xFF	; 255
 23e:	7f 4f       	sbci	r23, 0xFF	; 255
 240:	8f 4f       	sbci	r24, 0xFF	; 255
 242:	9f 4f       	sbci	r25, 0xFF	; 255
 244:	16 c0       	rjmp	.+44     	; 0x272 <__floatsisf+0x6c>
 246:	88 23       	and	r24, r24
 248:	11 f0       	breq	.+4      	; 0x24e <__floatsisf+0x48>
 24a:	96 e9       	ldi	r25, 0x96	; 150
 24c:	11 c0       	rjmp	.+34     	; 0x270 <__floatsisf+0x6a>
 24e:	77 23       	and	r23, r23
 250:	21 f0       	breq	.+8      	; 0x25a <__floatsisf+0x54>
 252:	9e e8       	ldi	r25, 0x8E	; 142
 254:	87 2f       	mov	r24, r23
 256:	76 2f       	mov	r23, r22
 258:	05 c0       	rjmp	.+10     	; 0x264 <__floatsisf+0x5e>
 25a:	66 23       	and	r22, r22
 25c:	71 f0       	breq	.+28     	; 0x27a <__floatsisf+0x74>
 25e:	96 e8       	ldi	r25, 0x86	; 134
 260:	86 2f       	mov	r24, r22
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	2a f0       	brmi	.+10     	; 0x272 <__floatsisf+0x6c>
 268:	9a 95       	dec	r25
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	88 1f       	adc	r24, r24
 270:	da f7       	brpl	.-10     	; 0x268 <__floatsisf+0x62>
 272:	88 0f       	add	r24, r24
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	97 f9       	bld	r25, 7
 27a:	08 95       	ret

0000027c <__fp_cmp>:
 27c:	99 0f       	add	r25, r25
 27e:	00 08       	sbc	r0, r0
 280:	55 0f       	add	r21, r21
 282:	aa 0b       	sbc	r26, r26
 284:	e0 e8       	ldi	r30, 0x80	; 128
 286:	fe ef       	ldi	r31, 0xFE	; 254
 288:	16 16       	cp	r1, r22
 28a:	17 06       	cpc	r1, r23
 28c:	e8 07       	cpc	r30, r24
 28e:	f9 07       	cpc	r31, r25
 290:	c0 f0       	brcs	.+48     	; 0x2c2 <__fp_cmp+0x46>
 292:	12 16       	cp	r1, r18
 294:	13 06       	cpc	r1, r19
 296:	e4 07       	cpc	r30, r20
 298:	f5 07       	cpc	r31, r21
 29a:	98 f0       	brcs	.+38     	; 0x2c2 <__fp_cmp+0x46>
 29c:	62 1b       	sub	r22, r18
 29e:	73 0b       	sbc	r23, r19
 2a0:	84 0b       	sbc	r24, r20
 2a2:	95 0b       	sbc	r25, r21
 2a4:	39 f4       	brne	.+14     	; 0x2b4 <__fp_cmp+0x38>
 2a6:	0a 26       	eor	r0, r26
 2a8:	61 f0       	breq	.+24     	; 0x2c2 <__fp_cmp+0x46>
 2aa:	23 2b       	or	r18, r19
 2ac:	24 2b       	or	r18, r20
 2ae:	25 2b       	or	r18, r21
 2b0:	21 f4       	brne	.+8      	; 0x2ba <__fp_cmp+0x3e>
 2b2:	08 95       	ret
 2b4:	0a 26       	eor	r0, r26
 2b6:	09 f4       	brne	.+2      	; 0x2ba <__fp_cmp+0x3e>
 2b8:	a1 40       	sbci	r26, 0x01	; 1
 2ba:	a6 95       	lsr	r26
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	81 1d       	adc	r24, r1
 2c0:	81 1d       	adc	r24, r1
 2c2:	08 95       	ret

000002c4 <__gesf2>:
 2c4:	db df       	rcall	.-74     	; 0x27c <__fp_cmp>
 2c6:	08 f4       	brcc	.+2      	; 0x2ca <__gesf2+0x6>
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
