
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000566  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000005da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005e8  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c9  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058c  00000000  00000000  00001139  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000366  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a5 36       	cpi	r26, 0x65	; 101
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	92 c2       	rjmp	.+1316   	; 0x562 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
int main();



int main(void)
{
  40:	1f 93       	push	r17
  42:	cf 93       	push	r28
  44:	df 93       	push	r29
  46:	00 d0       	rcall	.+0      	; 0x48 <main+0x8>
  48:	00 d0       	rcall	.+0      	; 0x4a <main+0xa>
  4a:	cd b7       	in	r28, 0x3d	; 61
  4c:	de b7       	in	r29, 0x3e	; 62

	volatile int8_t delta = 0;
  4e:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t sollwert = 128;
  50:	80 e8       	ldi	r24, 0x80	; 128
  52:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t istwert = 127;
  54:	8f e7       	ldi	r24, 0x7F	; 127
  56:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t toleranz = 5;
  58:	85 e0       	ldi	r24, 0x05	; 5
  5a:	8c 83       	std	Y+4, r24	; 0x04

	init();
  5c:	b3 d1       	rcall	.+870    	; 0x3c4 <_Z4initv>
	initADC();
  5e:	02 d2       	rcall	.+1028   	; 0x464 <_Z7initADCv>

    while (1) 
    {
		delta = keyGain * readKeys();  // TODO: Overflow und co !
  60:	9e d0       	rcall	.+316    	; 0x19e <_Z8readKeysv>
  62:	89 83       	std	Y+1, r24	; 0x01
		sollwert += delta;
  64:	99 81       	ldd	r25, Y+1	; 0x01
  66:	8a 81       	ldd	r24, Y+2	; 0x02
  68:	89 0f       	add	r24, r25
  6a:	8a 83       	std	Y+2, r24	; 0x02

		// stellwert Limitieren
		if (sollwert < PotiLimitLower) {
  6c:	8a 81       	ldd	r24, Y+2	; 0x02
  6e:	88 2f       	mov	r24, r24
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	09 2e       	mov	r0, r25
  74:	00 0c       	add	r0, r0
  76:	aa 0b       	sbc	r26, r26
  78:	bb 0b       	sbc	r27, r27
  7a:	bc 01       	movw	r22, r24
  7c:	cd 01       	movw	r24, r26
  7e:	0e d2       	rcall	.+1052   	; 0x49c <__floatsisf>
  80:	dc 01       	movw	r26, r24
  82:	cb 01       	movw	r24, r22
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	23 e3       	ldi	r18, 0x33	; 51
  88:	33 e3       	ldi	r19, 0x33	; 51
  8a:	43 ea       	ldi	r20, 0xA3	; 163
  8c:	50 e4       	ldi	r21, 0x40	; 64
  8e:	bc 01       	movw	r22, r24
  90:	cd 01       	movw	r24, r26
  92:	fe d1       	rcall	.+1020   	; 0x490 <__cmpsf2>
  94:	88 23       	and	r24, r24
  96:	0c f0       	brlt	.+2      	; 0x9a <main+0x5a>
  98:	10 e0       	ldi	r17, 0x00	; 0
  9a:	11 23       	and	r17, r17
  9c:	19 f0       	breq	.+6      	; 0xa4 <main+0x64>
			sollwert = PotiLimitLower;
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	8a 83       	std	Y+2, r24	; 0x02
  a2:	1b c0       	rjmp	.+54     	; 0xda <main+0x9a>
			} else if (sollwert > PotiLimitUpper) {
  a4:	8a 81       	ldd	r24, Y+2	; 0x02
  a6:	88 2f       	mov	r24, r24
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	09 2e       	mov	r0, r25
  ac:	00 0c       	add	r0, r0
  ae:	aa 0b       	sbc	r26, r26
  b0:	bb 0b       	sbc	r27, r27
  b2:	bc 01       	movw	r22, r24
  b4:	cd 01       	movw	r24, r26
  b6:	f2 d1       	rcall	.+996    	; 0x49c <__floatsisf>
  b8:	dc 01       	movw	r26, r24
  ba:	cb 01       	movw	r24, r22
  bc:	11 e0       	ldi	r17, 0x01	; 1
  be:	27 e6       	ldi	r18, 0x67	; 103
  c0:	36 ee       	ldi	r19, 0xE6	; 230
  c2:	49 e7       	ldi	r20, 0x79	; 121
  c4:	53 e4       	ldi	r21, 0x43	; 67
  c6:	bc 01       	movw	r22, r24
  c8:	cd 01       	movw	r24, r26
  ca:	47 d2       	rcall	.+1166   	; 0x55a <__gesf2>
  cc:	18 16       	cp	r1, r24
  ce:	0c f0       	brlt	.+2      	; 0xd2 <main+0x92>
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	11 23       	and	r17, r17
  d4:	11 f0       	breq	.+4      	; 0xda <main+0x9a>
			sollwert = PotiLimitUpper;
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	8a 83       	std	Y+2, r24	; 0x02
		}


		// Ist-Wert einlesen, (ADC Left Adjust Result, deshalb nur ein 8bit Register lesen)
		istwert = ADCH;
  da:	85 e2       	ldi	r24, 0x25	; 37
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	80 81       	ld	r24, Z
  e2:	8b 83       	std	Y+3, r24	; 0x03


		// Motor steuer Signal
		if ((sollwert - istwert) > toleranz) {
  e4:	8a 81       	ldd	r24, Y+2	; 0x02
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	88 2f       	mov	r24, r24
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	28 1b       	sub	r18, r24
  f2:	39 0b       	sbc	r19, r25
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	82 17       	cp	r24, r18
  fe:	93 07       	cpc	r25, r19
 100:	0c f0       	brlt	.+2      	; 0x104 <main+0xc4>
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	44 23       	and	r20, r20
 106:	99 f0       	breq	.+38     	; 0x12e <main+0xee>
			// motor + signal geben
			// mehr bremsen
			PORTB |= (1 << PinMotP);	//PinMotP im PORTB setzen
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	28 e3       	ldi	r18, 0x38	; 56
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	f9 01       	movw	r30, r18
 112:	20 81       	ld	r18, Z
 114:	20 61       	ori	r18, 0x10	; 16
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	        PORTB &= ~(1 << PinMotN);	//PinMotN im PORTB löschen
 11a:	88 e3       	ldi	r24, 0x38	; 56
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	28 e3       	ldi	r18, 0x38	; 56
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	20 81       	ld	r18, Z
 126:	27 7f       	andi	r18, 0xF7	; 247
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	99 cf       	rjmp	.-206    	; 0x60 <main+0x20>

		} else if  ((istwert - sollwert) > toleranz) {
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	28 1b       	sub	r18, r24
 13c:	39 0b       	sbc	r19, r25
 13e:	8c 81       	ldd	r24, Y+4	; 0x04
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	82 17       	cp	r24, r18
 148:	93 07       	cpc	r25, r19
 14a:	0c f0       	brlt	.+2      	; 0x14e <main+0x10e>
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	44 23       	and	r20, r20
 150:	99 f0       	breq	.+38     	; 0x178 <__stack+0x19>
			// motor - signal geben
			// weniger bremsen
			PORTB |= (1 << PinMotN);	//PinMotN im PORTB setzen
 152:	88 e3       	ldi	r24, 0x38	; 56
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	28 e3       	ldi	r18, 0x38	; 56
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	f9 01       	movw	r30, r18
 15c:	20 81       	ld	r18, Z
 15e:	28 60       	ori	r18, 0x08	; 8
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
			PORTB &= ~(1 << PinMotP);	//PinMotP im PORTB löschen
 164:	88 e3       	ldi	r24, 0x38	; 56
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	28 e3       	ldi	r18, 0x38	; 56
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	2f 7e       	andi	r18, 0xEF	; 239
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
 176:	74 cf       	rjmp	.-280    	; 0x60 <main+0x20>

		} else {
			// motor soll nicht laufen
			PORTB &= ~(1 << PinMotN);	//PinMotN im PORTB löschen
 178:	88 e3       	ldi	r24, 0x38	; 56
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	28 e3       	ldi	r18, 0x38	; 56
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	27 7f       	andi	r18, 0xF7	; 247
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
			PORTB &= ~(1 << PinMotP);	//PinMotP im PORTB löschen
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	28 e3       	ldi	r18, 0x38	; 56
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	20 81       	ld	r18, Z
 196:	2f 7e       	andi	r18, 0xEF	; 239
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
	volatile uint8_t toleranz = 5;

	init();
	initADC();

    while (1) 
 19c:	61 cf       	rjmp	.-318    	; 0x60 <main+0x20>

0000019e <_Z8readKeysv>:

	}
}


int8_t readKeys() {
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	static uint8_t keyState = 0;
	volatile static bool up  = 0;
	volatile static bool down = 0;

	// Eingänge lesen
	up	=  PINB & (1 << PinPlus);
 1a6:	86 e3       	ldi	r24, 0x36	; 54
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	88 2f       	mov	r24, r24
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	99 27       	eor	r25, r25
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	89 2b       	or	r24, r25
 1ba:	09 f4       	brne	.+2      	; 0x1be <_Z8readKeysv+0x20>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
	down = PINB & (1 << PinMinus);
 1c2:	86 e3       	ldi	r24, 0x36	; 54
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	88 2f       	mov	r24, r24
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	82 70       	andi	r24, 0x02	; 2
 1d0:	99 27       	eor	r25, r25
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	89 2b       	or	r24, r25
 1d6:	09 f4       	brne	.+2      	; 0x1da <_Z8readKeysv+0x3c>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <_ZZ8readKeysvE4down>
	++keyCounter;
 1de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <_ZZ8readKeysvE10keyCounter>
 1e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 1ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_ZZ8readKeysvE10keyCounter>

	// Beide Tasten gleichzeitig --> ungültig.
	if (up & down) {
 1f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZZ8readKeysvE4down>
 1fc:	88 2f       	mov	r24, r24
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	82 23       	and	r24, r18
 202:	93 23       	and	r25, r19
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	89 2b       	or	r24, r25
 208:	09 f4       	brne	.+2      	; 0x20c <_Z8readKeysv+0x6e>
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	22 23       	and	r18, r18
 20e:	21 f0       	breq	.+8      	; 0x218 <_Z8readKeysv+0x7a>
		keyState = 0;
 210:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZZ8readKeysvE8keyState>
		return(0);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	71 c0       	rjmp	.+226    	; 0x2fa <_Z8readKeysv+0x15c>
	}

	// Es wurde zuvor noch nichts gedrückt
	if (keyState == 0) {
 218:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ8readKeysvE8keyState>
 21c:	88 23       	and	r24, r24
 21e:	d1 f4       	brne	.+52     	; 0x254 <_Z8readKeysv+0xb6>
		if (up) {
 220:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 224:	88 23       	and	r24, r24
 226:	49 f0       	breq	.+18     	; 0x23a <_Z8readKeysv+0x9c>
			keyState= 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 22e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 232:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter>
			return(0);
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	60 c0       	rjmp	.+192    	; 0x2fa <_Z8readKeysv+0x15c>
		} else if (down) {
 23a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZZ8readKeysvE4down>
 23e:	88 23       	and	r24, r24
 240:	49 f0       	breq	.+18     	; 0x254 <_Z8readKeysv+0xb6>
			keyState= 2;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 248:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 24c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter>
			return(0);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	53 c0       	rjmp	.+166    	; 0x2fa <_Z8readKeysv+0x15c>
		}
	}

	// up gedrückt, am warten
	if ((keyState == 1) & (keyCounter >= debounceCounter)) {
 254:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ8readKeysvE8keyState>
 258:	31 e0       	ldi	r19, 0x01	; 1
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	09 f0       	breq	.+2      	; 0x260 <_Z8readKeysv+0xc2>
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <_ZZ8readKeysvE10keyCounter>
 264:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	cc 97       	sbiw	r24, 0x3c	; 60
 26c:	08 f4       	brcc	.+2      	; 0x270 <_Z8readKeysv+0xd2>
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	83 2f       	mov	r24, r19
 272:	82 23       	and	r24, r18
 274:	88 23       	and	r24, r24
 276:	b9 f0       	breq	.+46     	; 0x2a6 <_Z8readKeysv+0x108>
		if (up) {
 278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 27c:	88 23       	and	r24, r24
 27e:	59 f0       	breq	.+22     	; 0x296 <_Z8readKeysv+0xf8>
			keyState = 0;
 280:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 284:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 288:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter>
			dbgPulse(4);
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	37 d0       	rcall	.+110    	; 0x300 <_Z8dbgPulsei>
			return(1);
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	32 c0       	rjmp	.+100    	; 0x2fa <_Z8readKeysv+0x15c>
		} else {
			keyState = 0;
 296:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 29a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 29e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter>
			return(0);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	2a c0       	rjmp	.+84     	; 0x2fa <_Z8readKeysv+0x15c>
		}
	}

		
	// down gedrückt, am warten
	if ((keyState == 2) & (keyCounter >= debounceCounter)) {
 2a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZZ8readKeysvE8keyState>
 2aa:	31 e0       	ldi	r19, 0x01	; 1
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <_Z8readKeysv+0x114>
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <_ZZ8readKeysvE10keyCounter>
 2b6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	cc 97       	sbiw	r24, 0x3c	; 60
 2be:	08 f4       	brcc	.+2      	; 0x2c2 <_Z8readKeysv+0x124>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	83 2f       	mov	r24, r19
 2c4:	82 23       	and	r24, r18
 2c6:	88 23       	and	r24, r24
 2c8:	b9 f0       	breq	.+46     	; 0x2f8 <_Z8readKeysv+0x15a>
		if (down) {
 2ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZZ8readKeysvE4down>
 2ce:	88 23       	and	r24, r24
 2d0:	59 f0       	breq	.+22     	; 0x2e8 <_Z8readKeysv+0x14a>
			keyState = 0;
 2d2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 2d6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 2da:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter>
			dbgPulse(7);
 2de:	87 e0       	ldi	r24, 0x07	; 7
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e d0       	rcall	.+28     	; 0x300 <_Z8dbgPulsei>
			return(-1);
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	09 c0       	rjmp	.+18     	; 0x2fa <_Z8readKeysv+0x15c>
			} else {
			keyState = 0;
 2e8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZZ8readKeysvE8keyState>
			keyCounter = 0;
 2ec:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZZ8readKeysvE10keyCounter+0x1>
 2f0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZZ8readKeysvE10keyCounter>
			return(0);
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <_Z8readKeysv+0x15c>
		}
	}
	return(0);
 2f8:	80 e0       	ldi	r24, 0x00	; 0
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <_Z8dbgPulsei>:

void dbgPulse(int pulses){
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <_Z8dbgPulsei+0x6>
 306:	00 d0       	rcall	.+0      	; 0x308 <_Z8dbgPulsei+0x8>
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	9c 83       	std	Y+4, r25	; 0x04
 30e:	8b 83       	std	Y+3, r24	; 0x03
	// macht pulse am motP ausgang 
	for (int i = 0; i< pulses; i++){
 310:	1a 82       	std	Y+2, r1	; 0x02
 312:	19 82       	std	Y+1, r1	; 0x01
 314:	29 81       	ldd	r18, Y+1	; 0x01
 316:	3a 81       	ldd	r19, Y+2	; 0x02
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	9c 81       	ldd	r25, Y+4	; 0x04
 31c:	28 17       	cp	r18, r24
 31e:	39 07       	cpc	r19, r25
 320:	0c f0       	brlt	.+2      	; 0x324 <_Z8dbgPulsei+0x24>
 322:	48 c0       	rjmp	.+144    	; 0x3b4 <_Z8dbgPulsei+0xb4>
	PORTB |= (1 << PinMotP);	//PinMotP im PORTB setzen
 324:	88 e3       	ldi	r24, 0x38	; 56
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	28 e3       	ldi	r18, 0x38	; 56
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	f9 01       	movw	r30, r18
 32e:	20 81       	ld	r18, Z
 330:	20 61       	ori	r18, 0x10	; 16
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
	...
	asm("NOP");
	asm("NOP");
	asm("NOP");
	asm("NOP");
	asm("NOP");
	PORTB &= ~(1 << PinMotP);	//PinMotP im PORTB löschen
 366:	88 e3       	ldi	r24, 0x38	; 56
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	28 e3       	ldi	r18, 0x38	; 56
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	f9 01       	movw	r30, r18
 370:	20 81       	ld	r18, Z
 372:	2f 7e       	andi	r18, 0xEF	; 239
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
	...
	return(0);
}

void dbgPulse(int pulses){
	// macht pulse am motP ausgang 
	for (int i = 0; i< pulses; i++){
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	9a 81       	ldd	r25, Y+2	; 0x02
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	9a 83       	std	Y+2, r25	; 0x02
 3b0:	89 83       	std	Y+1, r24	; 0x01
 3b2:	b0 cf       	rjmp	.-160    	; 0x314 <_Z8dbgPulsei+0x14>
	asm("NOP");
	asm("NOP");
	asm("NOP");	
	}

}
 3b4:	00 00       	nop
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <_Z4initv>:


void init(){
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
	// Als Eingang konfigurieren (Eingang: clear bit)
	DDRB &= ~(1 << PinPlus);
 3cc:	87 e3       	ldi	r24, 0x37	; 55
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	27 e3       	ldi	r18, 0x37	; 55
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	f9 01       	movw	r30, r18
 3d6:	20 81       	ld	r18, Z
 3d8:	2e 7f       	andi	r18, 0xFE	; 254
 3da:	fc 01       	movw	r30, r24
 3dc:	20 83       	st	Z, r18
	DDRB &= ~(1 << PinMinus);
 3de:	87 e3       	ldi	r24, 0x37	; 55
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	27 e3       	ldi	r18, 0x37	; 55
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	f9 01       	movw	r30, r18
 3e8:	20 81       	ld	r18, Z
 3ea:	2d 7f       	andi	r18, 0xFD	; 253
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
	DDRB &= ~(1 << PinVin);
 3f0:	87 e3       	ldi	r24, 0x37	; 55
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	27 e3       	ldi	r18, 0x37	; 55
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	2b 7f       	andi	r18, 0xFB	; 251
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18

	// Für die Taster die internen PullUp Resistors aktivieren
	// richtig: set bit:
	PORTB |= (1 << PinPlus);
 402:	88 e3       	ldi	r24, 0x38	; 56
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	28 e3       	ldi	r18, 0x38	; 56
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	f9 01       	movw	r30, r18
 40c:	20 81       	ld	r18, Z
 40e:	21 60       	ori	r18, 0x01	; 1
 410:	fc 01       	movw	r30, r24
 412:	20 83       	st	Z, r18
	PORTB |= (1 << PinMinus);
 414:	88 e3       	ldi	r24, 0x38	; 56
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	28 e3       	ldi	r18, 0x38	; 56
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	f9 01       	movw	r30, r18
 41e:	20 81       	ld	r18, Z
 420:	22 60       	ori	r18, 0x02	; 2
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18


	
	//Als Ausgang konfigurieren: (Ausgang: set bit)
	DDRB |= (1 << PinMotP);
 426:	87 e3       	ldi	r24, 0x37	; 55
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	27 e3       	ldi	r18, 0x37	; 55
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	f9 01       	movw	r30, r18
 430:	20 81       	ld	r18, Z
 432:	20 61       	ori	r18, 0x10	; 16
 434:	fc 01       	movw	r30, r24
 436:	20 83       	st	Z, r18
	DDRB |= (1 << PinMotN);
 438:	87 e3       	ldi	r24, 0x37	; 55
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	27 e3       	ldi	r18, 0x37	; 55
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	f9 01       	movw	r30, r18
 442:	20 81       	ld	r18, Z
 444:	28 60       	ori	r18, 0x08	; 8
 446:	fc 01       	movw	r30, r24
 448:	20 83       	st	Z, r18
	DDRB |= (1 << PinLED);
 44a:	87 e3       	ldi	r24, 0x37	; 55
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	27 e3       	ldi	r18, 0x37	; 55
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	20 81       	ld	r18, Z
 456:	20 62       	ori	r18, 0x20	; 32
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
}
 45c:	00 00       	nop
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <_Z7initADCv>:


void initADC()
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
            (0 << REFS1) |		// Sets ref. voltage to VCC, bit 1 (tiny45 != mega8)
            (0 << REFS0) |		// Sets ref. voltage to VCC, bit 0 (tiny45 != mega8)
            (0 << MUX3)  |		// use ADC2 for input (PinVin=PB2), MUX bit 3
            (0 << MUX2)  |		// use ADC2 for input (PinVin=PB2), MUX bit 2
            (0 << MUX1)  |		// use ADC2 for input (PinVin=PB2), MUX bit 1
            (1 << MUX0);		// use ADC2 for input (PinVin=PB2), MUX bit 0
 46c:	87 e2       	ldi	r24, 0x27	; 39
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	21 e2       	ldi	r18, 0x21	; 33
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
            (1 << ADEN)  |		// Enable ADC 
            (1 << ADSC)  |		// start conversion
			(1 << ADATE) |		// ADC auto trigger enable (trigger select in ASCSRB)
			(1 << ADPS2) |		// set prescaler to 64, bit 2 
            (1 << ADPS1) |		// set prescaler to 64, bit 1 
            (0 << ADPS0);		// set prescaler to 64, bit 0  
 476:	86 e2       	ldi	r24, 0x26	; 38
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	26 ee       	ldi	r18, 0xE6	; 230
 47c:	fc 01       	movw	r30, r24
 47e:	20 83       	st	Z, r18
					
	ADCSRB =					// Set trigger source = Free Running mode (000)
			 (0 << ADTS2)  |	// ADC Auto Trigger Source Bit 2
			 (0 << ADTS1)  |	// ADC Auto Trigger Source Bit 1
			 (0 << ADTS0);		// ADC Auto Trigger Source Bit 0
 480:	83 e2       	ldi	r24, 0x23	; 35
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	fc 01       	movw	r30, r24
 486:	10 82       	st	Z, r1
}
 488:	00 00       	nop
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <__cmpsf2>:
 490:	40 d0       	rcall	.+128    	; 0x512 <__fp_cmp>
 492:	08 f4       	brcc	.+2      	; 0x496 <__cmpsf2+0x6>
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	08 95       	ret

00000498 <__floatunsisf>:
 498:	e8 94       	clt
 49a:	09 c0       	rjmp	.+18     	; 0x4ae <__floatsisf+0x12>

0000049c <__floatsisf>:
 49c:	97 fb       	bst	r25, 7
 49e:	3e f4       	brtc	.+14     	; 0x4ae <__floatsisf+0x12>
 4a0:	90 95       	com	r25
 4a2:	80 95       	com	r24
 4a4:	70 95       	com	r23
 4a6:	61 95       	neg	r22
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	8f 4f       	sbci	r24, 0xFF	; 255
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	99 23       	and	r25, r25
 4b0:	a9 f0       	breq	.+42     	; 0x4dc <__floatsisf+0x40>
 4b2:	f9 2f       	mov	r31, r25
 4b4:	96 e9       	ldi	r25, 0x96	; 150
 4b6:	bb 27       	eor	r27, r27
 4b8:	93 95       	inc	r25
 4ba:	f6 95       	lsr	r31
 4bc:	87 95       	ror	r24
 4be:	77 95       	ror	r23
 4c0:	67 95       	ror	r22
 4c2:	b7 95       	ror	r27
 4c4:	f1 11       	cpse	r31, r1
 4c6:	f8 cf       	rjmp	.-16     	; 0x4b8 <__floatsisf+0x1c>
 4c8:	fa f4       	brpl	.+62     	; 0x508 <__floatsisf+0x6c>
 4ca:	bb 0f       	add	r27, r27
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__floatsisf+0x36>
 4ce:	60 ff       	sbrs	r22, 0
 4d0:	1b c0       	rjmp	.+54     	; 0x508 <__floatsisf+0x6c>
 4d2:	6f 5f       	subi	r22, 0xFF	; 255
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
 4d6:	8f 4f       	sbci	r24, 0xFF	; 255
 4d8:	9f 4f       	sbci	r25, 0xFF	; 255
 4da:	16 c0       	rjmp	.+44     	; 0x508 <__floatsisf+0x6c>
 4dc:	88 23       	and	r24, r24
 4de:	11 f0       	breq	.+4      	; 0x4e4 <__floatsisf+0x48>
 4e0:	96 e9       	ldi	r25, 0x96	; 150
 4e2:	11 c0       	rjmp	.+34     	; 0x506 <__floatsisf+0x6a>
 4e4:	77 23       	and	r23, r23
 4e6:	21 f0       	breq	.+8      	; 0x4f0 <__floatsisf+0x54>
 4e8:	9e e8       	ldi	r25, 0x8E	; 142
 4ea:	87 2f       	mov	r24, r23
 4ec:	76 2f       	mov	r23, r22
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <__floatsisf+0x5e>
 4f0:	66 23       	and	r22, r22
 4f2:	71 f0       	breq	.+28     	; 0x510 <__floatsisf+0x74>
 4f4:	96 e8       	ldi	r25, 0x86	; 134
 4f6:	86 2f       	mov	r24, r22
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	2a f0       	brmi	.+10     	; 0x508 <__floatsisf+0x6c>
 4fe:	9a 95       	dec	r25
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	da f7       	brpl	.-10     	; 0x4fe <__floatsisf+0x62>
 508:	88 0f       	add	r24, r24
 50a:	96 95       	lsr	r25
 50c:	87 95       	ror	r24
 50e:	97 f9       	bld	r25, 7
 510:	08 95       	ret

00000512 <__fp_cmp>:
 512:	99 0f       	add	r25, r25
 514:	00 08       	sbc	r0, r0
 516:	55 0f       	add	r21, r21
 518:	aa 0b       	sbc	r26, r26
 51a:	e0 e8       	ldi	r30, 0x80	; 128
 51c:	fe ef       	ldi	r31, 0xFE	; 254
 51e:	16 16       	cp	r1, r22
 520:	17 06       	cpc	r1, r23
 522:	e8 07       	cpc	r30, r24
 524:	f9 07       	cpc	r31, r25
 526:	c0 f0       	brcs	.+48     	; 0x558 <__fp_cmp+0x46>
 528:	12 16       	cp	r1, r18
 52a:	13 06       	cpc	r1, r19
 52c:	e4 07       	cpc	r30, r20
 52e:	f5 07       	cpc	r31, r21
 530:	98 f0       	brcs	.+38     	; 0x558 <__fp_cmp+0x46>
 532:	62 1b       	sub	r22, r18
 534:	73 0b       	sbc	r23, r19
 536:	84 0b       	sbc	r24, r20
 538:	95 0b       	sbc	r25, r21
 53a:	39 f4       	brne	.+14     	; 0x54a <__fp_cmp+0x38>
 53c:	0a 26       	eor	r0, r26
 53e:	61 f0       	breq	.+24     	; 0x558 <__fp_cmp+0x46>
 540:	23 2b       	or	r18, r19
 542:	24 2b       	or	r18, r20
 544:	25 2b       	or	r18, r21
 546:	21 f4       	brne	.+8      	; 0x550 <__fp_cmp+0x3e>
 548:	08 95       	ret
 54a:	0a 26       	eor	r0, r26
 54c:	09 f4       	brne	.+2      	; 0x550 <__fp_cmp+0x3e>
 54e:	a1 40       	sbci	r26, 0x01	; 1
 550:	a6 95       	lsr	r26
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	81 1d       	adc	r24, r1
 556:	81 1d       	adc	r24, r1
 558:	08 95       	ret

0000055a <__gesf2>:
 55a:	db df       	rcall	.-74     	; 0x512 <__fp_cmp>
 55c:	08 f4       	brcc	.+2      	; 0x560 <__gesf2+0x6>
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	08 95       	ret

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
